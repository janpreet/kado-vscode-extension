name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
    - name: Install dependencies
      run: |
        npm install
        npm run install-client
        npm run install-server
    - name: Run compilation
      run: npm run compile
    - name: Run linter
      run: npm run lint
    - name: Build Extension
      run: npm run vscode:prepublish
    - name: List compiled files
      run: |
        echo "Client output:"
        ls -R client/out
        echo "Server output:"
        ls -R server/out
    - name: Run tests
      uses: GabrielBB/xvfb-action@v1
      with:
        run: npm test

  create-release:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Read package.json
      id: package_version
      run: echo "::set-output name=version::$(node -p "require('./package.json').version")"
    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.package_version.outputs.version }}
        release_name: Release v${{ steps.package_version.outputs.version }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: true
        prerelease: false

  publish:
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '18'
    - name: Install dependencies
      run: |
        npm install
        npm run install-client
        npm run install-server
    - name: Run compilation
      run: npm run compile
    - name: Install Publishing Tools
      run: |
        npm install -g vsce ovsx
    - name: Package Extension
      run: vsce package
    - name: Get VSIX File Name
      id: get_vsix
      run: echo "::set-output name=vsix_file::$(ls *.vsix)"
    - name: Publish to Visual Studio Marketplace
      run: vsce publish
      env:
        VSCE_PAT: ${{ secrets.VS_MARKETPLACE_TOKEN }}
    - name: Publish to Open VSX
      run: ovsx publish ${{ steps.get_vsix.outputs.vsix_file }} -p ${{ secrets.OVSX_TOKEN }}
    - name: Publish to JetBrains Marketplace
      run: |
        curl -X POST -F "file=@${{ steps.get_vsix.outputs.vsix_file }}" -F "token=${{ secrets.JETBRAINS_TOKEN }}" https://plugins.jetbrains.com/plugin/uploadPlugin
